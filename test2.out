
CMINUS COMPILATION: test2.cm
	1: int
	1: ID, name= fib
	1: (
	1: int
	1: ID, name= n
	1: )
	2: {
	3: int
	3: ID, name= a
	3: ;
	3: int
	3: ID, name= b
	3: ;
	3: int
	3: ID, name= c
	3: ;
	3: int
	3: ID, name= i
	3: ;
	4: ID, name= a
	4: =
	4: NUM, val= 0
	4: ;
	5: ID, name= b
	5: =
	5: NUM, val= 1
	5: ;
	6: ID, name= i
	6: =
	6: NUM, val= 2
	6: ;
	7: if
	7: (
	7: ID, name= n
	7: ==
	7: NUM, val= 0
	7: )
	7: {
	8: return
	8: ID, name= a
	8: ;
	9: }
	9: while
	9: (
	9: ID, name= i
	9: <=
	9: ID, name= n
	9: )
	9: {
	10: ID, name= c
	10: =
	10: ID, name= a
	10: +
	10: ID, name= b
	10: ;
	11: ID, name= a
	11: =
	11: ID, name= b
	11: ;
	12: ID, name= b
	12: =
	12: ID, name= c
	12: ;
	13: ID, name= i
	13: =
	13: ID, name= i
	13: +
	13: NUM, val= 1
	13: ;
	14: }
	15: return
	15: ID, name= b
	15: ;
	16: }
	18: void
	18: ID, name= main
	18: (
	18: void
	18: )
	19: {
	20: int
	20: ID, name= n
	20: ;
	21: ID, name= n
	21: =
	21: input
	21: (
	21: )
	21: ;
	22: output
	22: (
	22: ID, name= fib
	22: (
	22: ID, name= n
	22: )
	22: )
	22: ;
	23: }
	23: FIMARQV

Syntax tree:
  Type: int
    Fun: fib
      Type: int
        Var: n
      Type: int
        Var: a
      Type: int
        Var: b
      Type: int
        Var: c
      Type: int
        Var: i
      Assign to: a
        Id: a
        Const: 0
      Assign to: b
        Id: b
        Const: 1
      Assign to: i
        Id: i
        Const: 2
      If
        Op: ==
          Id: n
          Const: 0
        Return
          Id: a
      While
        Op: <=
          Id: i
          Id: n
        Assign to: c
          Id: c
          Op: +
            Id: a
            Id: b
        Assign to: a
          Id: a
          Id: b
        Assign to: b
          Id: b
          Id: c
        Assign to: i
          Id: i
          Op: +
            Id: i
            Const: 1
      Return
        Id: b
  Type: void
    Fun: main
      Type: void
      Type: int
        Var: n
      Assign to: n
        Id: n
        Input
      Output
        Call: fib
          Id: n

Building Symbol Table...

Checking Types...

Type Checking Finished.

Symbol table:

-----------------------------------------------------------
Scope    global
-----------------------------------------------------------
Type     Variable Name  Memloc  Line Numbers
-----------------------------------------------------------
int      Get_Address    0        0 
int      Call_Process   0        0 
void     main           6       18 
int      fib            0        1 22 
void     Set_Quantum    0        0 
-----------------------------------------------------------
Scope    fib
-----------------------------------------------------------
Type     Variable Name  Memloc  Line Numbers
-----------------------------------------------------------
int      a              2        3  4  8 10 11 
int      b              3        3  5 10 11 12 15 
int      c              4        3 10 12 
int      i              5        3  6  9 13 13 
int      n              1        1  7  9 
-----------------------------------------------------------
Scope    main
-----------------------------------------------------------
Type     Variable Name  Memloc  Line Numbers
-----------------------------------------------------------
int      n              7       20 21 22 
