
CMINUS COMPILATION: main.cm
	3: int
	3: ID, name= x
	3: [
	3: NUM, val= 10
	3: ]
	3: ;
	5: int
	5: ID, name= minloc
	5: (
	5: int
	5: ID, name= a
	5: [
	5: ]
	5: ,
	5: int
	5: ID, name= low
	5: ,
	5: int
	5: ID, name= high
	5: )
	5: {
	6: int
	6: ID, name= i
	6: ;
	6: int
	6: ID, name= x
	6: ;
	6: int
	6: ID, name= k
	6: ;
	7: ID, name= k
	7: =
	7: ID, name= low
	7: ;
	8: ID, name= x
	8: =
	8: ID, name= a
	8: [
	8: ID, name= low
	8: ]
	8: ;
	9: ID, name= i
	9: =
	9: ID, name= low
	9: +
	9: NUM, val= 1
	9: ;
	10: while
	10: (
	10: ID, name= i
	10: <
	10: ID, name= high
	10: )
	10: {
	11: if
	11: (
	11: ID, name= a
	11: [
	11: ID, name= i
	11: ]
	11: <
	11: ID, name= x
	11: )
	11: {
	12: ID, name= x
	12: =
	12: ID, name= a
	12: [
	12: ID, name= i
	12: ]
	12: ;
	13: ID, name= k
	13: =
	13: ID, name= i
	13: ;
	14: }
	15: ID, name= i
	15: =
	15: ID, name= i
	15: +
	15: NUM, val= 1
	15: ;
	16: }
	17: return
	17: ID, name= k
	17: ;
	18: }
	20: void
	20: ID, name= sort
	20: (
	20: int
	20: ID, name= a
	20: [
	20: ]
	20: ,
	20: int
	20: ID, name= low
	20: ,
	20: int
	20: ID, name= high
	20: )
	20: {
	21: int
	21: ID, name= i
	21: ;
	22: int
	22: ID, name= k
	22: ;
	23: while
	23: (
	23: ID, name= i
	23: <
	23: ID, name= high
	23: -
	23: NUM, val= 1
	23: )
	23: {
	24: int
	24: ID, name= t
	24: ;
	25: ID, name= k
	25: =
	25: ID, name= minloc
	25: (
	25: ID, name= a
	25: ,
	25: ID, name= i
	25: ,
	25: ID, name= high
	25: )
	25: ;
	26: ID, name= t
	26: =
	26: ID, name= a
	26: [
	26: ID, name= k
	26: ]
	26: ;
	27: ID, name= a
	27: [
	27: ID, name= k
	27: ]
	27: =
	27: ID, name= a
	27: [
	27: ID, name= i
	27: ]
	27: ;
	28: ID, name= a
	28: [
	28: ID, name= i
	28: ]
	28: =
	28: ID, name= t
	28: ;
	29: ID, name= i
	29: =
	29: ID, name= i
	29: +
	29: NUM, val= 1
	29: ;
	30: }
	31: }
	33: void
	33: ID, name= main
	33: (
	33: void
	33: )
	33: {
	34: int
	34: ID, name= i
	34: ;
	35: ID, name= i
	35: =
	35: NUM, val= 0
	35: ;
	36: ID, name= i
	36: =
	36: ID, name= output
	36: (
	36: )
	36: ;
	37: while
	37: (
	37: ID, name= i
	37: <
	37: NUM, val= 10
	37: )
	37: {
	38: ID, name= x
	38: [
	38: ID, name= i
	38: ]
	38: =
	38: ID, name= input
	38: (
	38: )
	38: ;
	39: ID, name= i
	39: =
	39: ID, name= i
	39: +
	39: NUM, val= 1
	39: ;
	40: }
	42: ID, name= sort
	42: (
	42: ID, name= x
	42: ,
	42: NUM, val= 0
	42: ,
	42: NUM, val= 10
	42: )
	42: ;
	43: ID, name= i
	43: =
	43: NUM, val= 0
	43: ;
	44: while
	44: (
	44: ID, name= i
	44: <
	44: NUM, val= 10
	44: )
	44: {
	45: ID, name= output
	45: (
	45: ID, name= x
	45: [
	45: ID, name= i
	45: ]
	45: )
	45: ;
	46: ID, name= i
	46: =
	46: ID, name= i
	46: +
	46: NUM, val= 1
	46: ;
	47: }
	48: return
	48: NUM, val= 1
	48: ;
	49: }
	49: FIMARQV

Syntax tree:
  Type: inteiro
    Var: x
  Type: inteiro
    Fun: minloc
      Type: inteiro
        Id: a
      Type: inteiro
        Id: low
      Type: inteiro
        Id: high
      Type: inteiro
        Var: i
      Type: inteiro
        Var: x
      Type: inteiro
        Var: k
      Assign to: k
        Id: k
        Id: low
      Assign to: x
        Id: x
        Vet: a
          Id: low
      Assign to: i
        Id: i
        Op: +
          Id: low
          Const: 1
      While
        Op: <
          Id: i
          Id: high
        If
          Op: <
            Vet: a
              Id: i
            Id: x
          Assign to: x
            Id: x
            Vet: a
              Id: i
          Assign to: k
            Id: k
            Id: i
        Assign to: i
          Id: i
          Op: +
            Id: i
            Const: 1
      Return
        Id: k
  Type: void
    Fun: sort
      Type: inteiro
        Id: a
      Type: inteiro
        Id: low
      Type: inteiro
        Id: high
      Type: inteiro
        Var: i
      Type: inteiro
        Var: k
      While
        Op: <
          Id: i
          Op: -
            Id: high
            Const: 1
        Type: inteiro
          Var: t
        Assign to: k
          Id: k
          Call: minloc
            Id: a
            Id: i
            Id: high
        Assign to: t
          Id: t
          Vet: a
            Id: k
        Assign to: a
          Vet: a
            Id: k
          Vet: a
            Id: i
        Assign to: a
          Vet: a
            Id: i
          Id: t
        Assign to: i
          Id: i
          Op: +
            Id: i
            Const: 1
  Type: void
    Fun: main
      Type: void
      Type: inteiro
        Var: i
      Assign to: i
        Id: i
        Const: 0
      Assign to: i
        Id: i
        Call: output
      While
        Op: <
          Id: i
          Const: 10
        Assign to: x
          Vet: x
            Id: i
          Call: input
        Assign to: i
          Id: i
          Op: +
            Id: i
            Const: 1
      Call: sort
        Id: x
        Const: 0
        Const: 10
      Assign to: i
        Id: i
        Const: 0
      While
        Op: <
          Id: i
          Const: 10
        Call: output
          Vet: x
            Id: i
        Assign to: i
          Id: i
          Op: +
            Id: i
            Const: 1
      Return
        Const: 1
