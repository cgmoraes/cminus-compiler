
CMINUS COMPILATION: test.cm
	1: int
	1: ID, name= vet
	1: [
	1: NUM, val= 2
	1: ]
	1: ;
	3: void
	3: ID, name= main
	3: (
	3: void
	3: )
	3: {
	4: int
	4: ID, name= addr
	4: ;
	4: int
	4: ID, name= i
	4: ;
	5: ID, name= i
	5: =
	5: NUM, val= 0
	5: ;
	6: ID, name= addr
	6: =
	6: NUM, val= 180
	6: ;
	7: ID, name= vet
	7: [
	7: NUM, val= 0
	7: ]
	7: =
	7: NUM, val= 180
	7: ;
	8: ID, name= vet
	8: [
	8: NUM, val= 1
	8: ]
	8: =
	8: NUM, val= 180
	8: x
	8: NUM, val= 2
	8: ;
	9: ID, name= Set_Quantum
	9: (
	9: NUM, val= 5
	9: )
	9: ;
	10: while
	10: (
	10: ID, name= vet
	10: [
	10: NUM, val= 1
	10: ]
	10: >
	10: NUM, val= 0
	10: )
	10: {
	11: ID, name= vet
	11: [
	11: ID, name= i
	11: ]
	11: =
	11: ID, name= Call_Process
	11: (
	11: ID, name= vet
	11: [
	11: ID, name= i
	11: ]
	11: ,
	11: NUM, val= 180
	11: x
	11: (
	11: ID, name= i
	11: +
	11: NUM, val= 1
	11: )
	11: )
	11: ;
	12: if
	12: (
	12: ID, name= i
	12: ==
	12: NUM, val= 0
	12: )
	12: {
	12: ID, name= i
	12: =
	12: NUM, val= 1
	12: ;
	12: }
	13: else
	13: {
	13: ID, name= i
	13: =
	13: NUM, val= 0
	13: ;
	13: }
	14: }
	16: while
	16: (
	16: ID, name= vet
	16: [
	16: NUM, val= 0
	16: ]
	16: >
	16: NUM, val= 0
	16: )
	16: {
	17: ID, name= vet
	17: [
	17: NUM, val= 0
	17: ]
	17: =
	17: ID, name= Call_Process
	17: (
	17: ID, name= vet
	17: [
	17: NUM, val= 0
	17: ]
	17: ,
	17: NUM, val= 180
	17: )
	17: ;
	18: }
	20: }
	20: FIMARQV

Syntax tree:
  Type: int
    Var: vet
  Type: void
    Fun: main
      Type: void
      Type: int
        Var: addr
      Type: int
        Var: i
      Assign to: i
        Id: i
        Const: 0
      Assign to: addr
        Id: addr
        Const: 180
      Assign to: vet
        Vet: vet
          Const: 0
        Const: 180
      Assign to: vet
        Vet: vet
          Const: 1
        Op: x
          Const: 180
          Const: 2
      Call: Set_Quantum
        Const: 5
      While
        Op: >
          Vet: vet
            Const: 1
          Const: 0
        Assign to: vet
          Vet: vet
            Id: i
          Call: Call_Process
            Vet: vet
              Id: i
            Op: x
              Const: 180
              Op: +
                Id: i
                Const: 1
        If
          Op: ==
            Id: i
            Const: 0
          Assign to: i
            Id: i
            Const: 1
          Assign to: i
            Id: i
            Const: 0
      While
        Op: >
          Vet: vet
            Const: 0
          Const: 0
        Assign to: vet
          Vet: vet
            Const: 0
          Call: Call_Process
            Vet: vet
              Const: 0
            Const: 180

Building Symbol Table...

Checking Types...

Type Checking Finished.

Symbol table:

-----------------------------------------------------------
Scope    global
-----------------------------------------------------------
Type     Variable Name  Memloc  Line Numbers
-----------------------------------------------------------
int      Get_Address    0        0 
int      Call_Process   0        0 11 17 
void     main           2        3 
int      vet            0        1  7  8 10 11 11 16 17 17 
void     Set_Quantum    0        0  9 
-----------------------------------------------------------
Scope    main
-----------------------------------------------------------
Type     Variable Name  Memloc  Line Numbers
-----------------------------------------------------------
int      addr           3        4  6 
int      i              4        4  5 11 11 11 12 12 13 
